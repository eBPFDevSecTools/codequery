#include <bpf/ctx/skb.h>
#include <bpf/api.h>
#include <node_config.h>
#include <netdev_config.h>
#include "lib/common.h"
#include "lib/trace.h"
#include "lib/encrypt.h"

__section ("from-network")
int from_network (struct __ctx_buff *ctx) {
    int ret = CTX_ACT_OK;
    __u16 proto __maybe_unused;
    enum trace_reason reason = TRACE_REASON_UNKNOWN;
    enum trace_point obs_point_to = TRACE_TO_STACK;
    enum trace_point obs_point_from = TRACE_FROM_NETWORK;
    bpf_clear_meta (ctx);
    if ((ctx->mark & MARK_MAGIC_HOST_MASK) == MARK_MAGIC_DECRYPT)
        obs_point_from = TRACE_FROM_STACK;
#ifdef ENABLE_IPSEC
    if (!validate_ethertype (ctx, &proto))
        goto out;
    ret = do_decrypt (ctx, proto);
#endif
#ifdef ENABLE_IPSEC
    if ((ctx->mark & MARK_MAGIC_HOST_MASK) == MARK_MAGIC_DECRYPT)
        reason = TRACE_REASON_ENCRYPTED;
    if (ret == CTX_ACT_REDIRECT)
        obs_point_to = TRACE_TO_HOST;
#endif
out :
    send_trace_notify (ctx, obs_point_from, 0, 0, 0, ctx->ingress_ifindex, reason, TRACE_PAYLOAD_LEN);
    send_trace_notify (ctx, obs_point_to, 0, 0, 0, ctx -> ingress_ifindex, reason, TRACE_PAYLOAD_LEN);
    return ret;
}

BPF_LICENSE ("Dual BSD/GPL");
