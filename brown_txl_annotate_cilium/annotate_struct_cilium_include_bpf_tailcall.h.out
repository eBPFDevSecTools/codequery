#ifndef __BPF_TAILCALL_H_
#define __BPF_TAILCALL_H_
#include "compiler.h"
#if !defined(__non_bpf_context) && defined(__bpf__)

static __always_inline __maybe_unused void tail_call_static (const struct __ctx_buff *ctx, const void *map, const __u32 slot) {
    if (!__builtin_constant_p (slot))
        __throw_build_bug ();
    asm volatile ("r1 = %[ctx]\n\t"
        "r2 = %[map]\n\t"
        "r3 = %[slot]\n\t"
        "call 12\n\t"
        :
        : [ctx] "r" (ctx), [map] "r" (map), [slot] "i" (slot)
        : "r0", "r1", "r2", "r3", "r4", "r5"
    );
}

static __always_inline __maybe_unused void tail_call_dynamic (struct __ctx_buff *ctx, const void *map, __u32 slot) {
    if (__builtin_constant_p (slot))
        __throw_build_bug ();
    tail_call (ctx, map, slot);
}
#else
# define tail_call_static(ctx, map, slot)	__throw_build_bug()
# define tail_call_dynamic(ctx, map, slot)	__throw_build_bug()
#endif /* !__non_bpf_context && __bpf__ */
#endif /* __BPF_TAILCALL_H_ */

