#include "common.h"
#include <bpf/ctx/skb.h>
#define ENDPOINTS_MAP test_cilium_lxc
#define POLICY_PROG_MAP_SIZE ENDPOINTS_MAP_SIZE
#define METRICS_MAP test_cilium_metrics
#define ENDPOINTS_MAP_SIZE 65536
#define IPCACHE_MAP_SIZE 512000
#define METRICS_MAP_SIZE 65536
#define EVENTS_MAP test_cilium_events
#define ENABLE_IPV4
#undef ENABLE_IPV6
#define SKIP_POLICY_MAP
#define ENABLE_NODEPORT
#define ENABLE_IP_MASQ_AGENT
#define SNAT_MAPPING_IPV4_SIZE 524288
#define CT_MAP_TCP6 test_cilium_ct_tcp6_65535
#define CT_MAP_ANY6 test_cilium_ct_any6_65535
#define CT_MAP_TCP4 test_cilium_ct_tcp4_65535
#define CT_MAP_ANY4 test_cilium_ct_any4_65535
#define CT_MAP_SIZE_TCP 4096
#define CT_MAP_SIZE_ANY 4096
#define CT_CONNECTION_LIFETIME_TCP	21600
#define CT_CONNECTION_LIFETIME_NONTCP	60
#define CT_SERVICE_LIFETIME_TCP		21600
#define CT_SERVICE_LIFETIME_NONTCP	60
#define CT_SERVICE_CLOSE_REBALANCE	30
#define CT_SYN_TIMEOUT			60
#define CT_CLOSE_TIMEOUT		10
#define CT_REPORT_INTERVAL		5
#define CT_REPORT_FLAGS			0xff
#define NODEPORT_PORT_MAX 32767
#define NODEPORT_PORT_MIN_NAT (NODEPORT_PORT_MAX + 1)
#define ct_lookup4 mock_ct_lookup4
#define ct_create4 mock_ct_create4
#include "lib/common.h"
#include "lib/csum.h"
#include "lib/l4.h"
#define __LIB_CONNTRACK_H_
static int mock_ct_lookup4_response = -1;

static __always_inline int mock_ct_lookup4 (__maybe_unused const void *map, __maybe_unused struct ipv4_ct_tuple *tuple, __maybe_unused struct __ctx_buff *ctx, __maybe_unused int off, __maybe_unused enum ct_dir dir, __maybe_unused struct ct_state *ct_state, __maybe_unused __u32 *monitor) {
    return mock_ct_lookup4_response;
}

static int mock_ct_create4_response = 1;

static __always_inline int mock_ct_create4 (__maybe_unused const void *map_main, __maybe_unused const void *map_related, __maybe_unused struct ipv4_ct_tuple *tuple, __maybe_unused struct __ctx_buff *ctx, __maybe_unused const int dir, __maybe_unused const struct ct_state *ct_state, __maybe_unused bool proxy_redirect, __maybe_unused bool from_l7lb) {
    return mock_ct_create4_response;
}
#include "lib/nat.h"
#include "bpf/section.h"

CHECK ("xdp", "nat")
int bpf_test (__maybe_unused struct xdp_md *ctx) {
    test_init ();
    struct __ctx_buff ctx_buff;
    struct ipv4_ct_tuple tuple;
    struct ipv4_nat_entry state;
    struct ipv4_nat_target target;
    mock_ct_lookup4_response = -1;
    TEST ("return -1 on error", {if (snat_v4_track_local (& ctx_buff, & tuple, & state, NAT_DIR_EGRESS, 0, & target) != - 1) {test_fail ();}});
    mock_ct_lookup4_response = 1;
    TEST ("return 0 on track", {if (snat_v4_track_local (& ctx_buff, & tuple, & state, NAT_DIR_EGRESS, 0, & target) != 0) {test_fail ();}});
    mock_ct_lookup4_response = CT_NEW;
    mock_ct_create4_response = -1;
    TEST ("return -1 on create error", {if (snat_v4_track_local (& ctx_buff, & tuple, & state, NAT_DIR_EGRESS, 0, & target) != - 1) {test_fail ();}});
    mock_ct_lookup4_response = CT_NEW;
    mock_ct_create4_response = 0;
    TEST ("return 0 on create success", {if (snat_v4_track_local (& ctx_buff, & tuple, & state, NAT_DIR_EGRESS, 0, & target) != 0) {test_fail ();}});
    test_finish ();
}

BPF_LICENSE ("Dual BSD/GPL");
